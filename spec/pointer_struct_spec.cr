require "./spec_helper"

from_segment = ->(byte_offset : UInt32, bytes : Bytes) do
  segments = [] of CapnProto::Segment
  segment = CapnProto::Segment.new(segments, bytes)
  CapnProto::Pointer::Struct.parse_from(
    segment, byte_offset, segment.u64(byte_offset)
  )
end

from_segments = ->(byte_offset : UInt32, chunks : Array(Bytes)) do
  segments = [] of CapnProto::Segment
  chunks.each { |chunk| CapnProto::Segment.new(segments, chunk) }
  segment = segments[0]
  CapnProto::Pointer::Struct.parse_from(
    segment, byte_offset, segment.u64(byte_offset)
  )
end

describe CapnProto::Pointer::Struct do
  it "reads numeric values in the data region" do
    p = from_segment.call(0_u32, Bytes[
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
      0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
    ])

    p.u64(0x0).should eq 0x7766554433221100_u64
    p.u64(0x8).should eq 0xffeeddccbbaa9988_u64
    p.u64(0x10).should eq 0 # outside the data region
    p.u32(0x0).should eq 0x33221100
    p.u32(0x4).should eq 0x77665544
    p.u32(0x8).should eq 0xbbaa9988
    p.u32(0xc).should eq 0xffeeddcc
    p.u32(0x10).should eq 0 # outside the data region
    p.u16(0x0).should eq 0x1100
    p.u16(0x2).should eq 0x3322
    p.u16(0xc).should eq 0xddcc
    p.u16(0xe).should eq 0xffee
    p.u16(0x10).should eq 0 # outside the data region
    p.u8(0x0).should eq 0x00
    p.u8(0x1).should eq 0x11
    p.u8(0xe).should eq 0xee
    p.u8(0xf).should eq 0xff
    p.u8(0x10).should eq 0 # outside the data region
    p.bool(0x0, 0b1).should eq false
    p.bool(0x1, 0b1).should eq true
    p.bool(0xe, 0b1).should eq false
    p.bool(0xf, 0b1).should eq true
    p.bool(0x0, 0b10).should eq false
    p.bool(0x1, 0b10).should eq false
    p.bool(0xe, 0b10).should eq true
    p.bool(0xf, 0b10).should eq true
    p.bool(0x10, 0b1).should eq false # outside the data region
    p.check_union(0x2, 0x3322).should eq true
    p.check_union(0x2, 0x3300).should eq false

    p.u64_if_set(0x8).should eq 0xffeeddccbbaa9988_u64
    p.u64_if_set(0x10).should eq nil # outside the data region
    p.u32_if_set(0xc).should eq 0xffeeddcc
    p.u32_if_set(0x10).should eq nil # outside the data region
    p.u16_if_set(0xe).should eq 0xffee
    p.u16_if_set(0x10).should eq nil # outside the data region
    p.u8_if_set(0xf).should eq 0xff
    p.u8_if_set(0x10).should eq nil # outside the data region
    p.u8_if_set(0x0).should eq nil # inside the data region, but zero
    p.bool_if_set(0xf, 0b10).should eq true
    p.bool_if_set(0x10, 0b1).should eq nil # outside the data region
    p.bool_if_set(0x0, 0b1).should eq nil # inside the data region, but false
  end

  it "can point to a prior data region" do
    p = from_segment.call(0x18_u32, Bytes[
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
      0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
      0xf0, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00,
      0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
    ])

    p.u64(0x0).should eq 0x7766554433221100_u64
    p.u64(0x8).should eq 0xffeeddccbbaa9988_u64
    p.u64(0x10).should eq 0 # outside the data region
  end

  it "can follow struct pointers to other structs" do
    p = from_segment.call(0_u32, Bytes[
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
      0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
      0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
    ])

    p0 = p.struct(0)
    p1 = p.struct(1)
    p2 = p.struct(2)
    p3 = p.struct(3)

    p0.u64(0x0).should eq 0x1111111111111111
    p0.u64(0x8).should eq 0x2222222222222222
    p0.u64(0x10).should eq 0 # outside the data region
    p1.u64(0x0).should eq 0x3333333333333333
    p1.u64(0x8).should eq 0x4444444444444444
    p1.u64(0x10).should eq 0 # outside the data region
    p2.u64(0x0).should eq 0x5555555555555555
    p2.u64(0x8).should eq 0x6666666666666666
    p2.u64(0x10).should eq 0 # outside the data region
    p3.u64(0x0).should eq 0 # an empty/invalid pointer has no data
    p3.u64(0x8).should eq 0 # an empty/invalid pointer has no data
  end

  it "can follow byte list pointers to text regions" do
    p = from_segment.call(0_u32, Bytes[
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
      0x09, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00,
      0x09, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00,
      0x0d, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00,
      'H'.ord, 'i'.ord, ' '.ord, 'T'.ord, 'e'.ord, 'x'.ord, 't'.ord, 0x00,
      'H'.ord, 'e'.ord, 'r'.ord, 'e'.ord, ' '.ord, 'i'.ord, 's'.ord, ' '.ord,
      'a'.ord, ' '.ord, 't'.ord, 'e'.ord, 'x'.ord, 't'.ord, '!'.ord, 0x00,
      'H'.ord, 'e'.ord, 'r'.ord, 'e'.ord, '\''.ord, 's'.ord, ' '.ord,
      's'.ord, 'o'.ord, 'm'.ord, 'e'.ord, ' '.ord,
      't'.ord, 'e'.ord, 'x'.ord, 't'.ord, ' '.ord,
      'w'.ord, 'i'.ord, 't'.ord, 'h'.ord, ' '.ord,
      'l'.ord, 'e'.ord, 'n'.ord, 'g'.ord, 't'.ord, 'h'.ord, ' '.ord,
      '3'.ord, '1'.ord, 0x00,
      'E'.ord, 'x'.ord, 'c'.ord, 'e'.ord, 'l'.ord, 'l'.ord, 'e'.ord,
      'n'.ord, 't'.ord, ' '.ord, 'E'.ord, 'x'.ord, 'a'.ord, 'm'.ord,
      'p'.ord, 'l'.ord, 'e'.ord, ' '.ord, 'o'.ord, 'f'.ord, ' '.ord,
      'a'.ord, ' '.ord, 'T'.ord, 'e'.ord, 'x'.ord, 't'.ord, ' '.ord,
      'S'.ord, 'e'.ord, 't'.ord, '!'.ord, 0x00,
      'T'.ord, 'h'.ord, 'i'.ord, 's'.ord, ' '.ord,
      't'.ord, 'e'.ord, 'x'.ord, 't'.ord, ' '.ord,
      'h'.ord, 'a'.ord, 's'.ord, ' '.ord, 'n'.ord, 'o'.ord, ' '.ord,
      'p'.ord, 'o'.ord, 'i'.ord, 'n'.ord, 't'.ord, 'e'.ord, 'r'.ord, ','.ord,
      ' '.ord, 's'.ord, 'o'.ord, ' '.ord, 'i'.ord, 't'.ord, ' '.ord,
      'w'.ord, 'o'.ord, 'n'.ord, '\''.ord, 't'.ord, ' '.ord, 'b'.ord, 'e'.ord,
      's'.ord, 'e'.ord, 'e'.ord, 'n'.ord, '.'.ord, 0x00,
    ])

    p.text(0).should eq "Hi Text"
    p.text(1).should eq "Here is a text!"
    p.text(2).should eq "Here's some text with length 31"
    p.text(3).should eq "" # outside the pointer region
  end

  it "can point to a data region via a far pointer" do
    p = from_segments.call(0_u32, [
      Bytes[
        0x12, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      ],
      Bytes[
        'T'.ord, 'h'.ord, 'e'.ord, 'r'.ord, 'e'.ord, '\''.ord, 's'.ord, ' '.ord,
        'n'.ord, 'o'.ord, 't'.ord, 'h'.ord, 'i'.ord, 'n'.ord, 'g'.ord, ' '.ord,
        'm'.ord, 'e'.ord, 'a'.ord, 'n'.ord, 'i'.ord, 'n'.ord, 'g'.ord,
        'f'.ord, 'u'.ord, 'l'.ord, ' '.ord, 'i'.ord, 'n'.ord, ' '.ord,
        't'.ord, 'h'.ord, 'i'.ord, 's'.ord, ' '.ord,
        'm'.ord, 'i'.ord, 'd'.ord, 'd'.ord, 'l'.ord, 'e'.ord, ' '.ord,
        's'.ord, 'e'.ord, 'g'.ord, 'm'.ord, 'e'.ord, 'n'.ord, 't'.ord, '.'.ord,
        ' '.ord, 'I'.ord, 't'.ord, '\''.ord, 's'.ord, ' '.ord,
        'j'.ord, 'u'.ord, 's'.ord, 't'.ord, ' '.ord, 'a'.ord, ' '.ord,
        'p'.ord, 'l'.ord, 'a'.ord, 'c'.ord, 'e'.ord,
        'h'.ord, 'o'.ord, 'l'.ord, 'd'.ord, 'e'.ord, 'r'.ord, ' '.ord,
        'i'.ord, 'n'.ord, ' '.ord, 'b'.ord, 'e'.ord, 't'.ord, 'w'.ord,
        'e'.ord, 'e'.ord, 'n'.ord, ' '.ord, 't'.ord, 'h'.ord, 'e'.ord, ' '.ord,
        'o'.ord, 't'.ord, 'h'.ord, 'e'.ord, 'r'.ord, ' '.ord,
        't'.ord, 'w'.ord, 'o'.ord, '.'.ord,
      ],
      Bytes[
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
      ]
    ])

    p.u64(0x0).should eq 0x7766554433221100_u64
    p.u64(0x8).should eq 0xffeeddccbbaa9988_u64
    p.u64(0x10).should eq 0 # outside the data region
  end

  it "can point to a byte region via a double-far pointer" do
    p = from_segments.call(0_u32, [
      Bytes[
        0x26, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      ],
      Bytes[
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0x12, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
      ],
      Bytes[
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
        0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
      ]
    ])

    p.u64(0x0).should eq 0x7766554433221100_u64
    p.u64(0x8).should eq 0xffeeddccbbaa9988_u64
    p.u64(0x10).should eq 0 # outside the data region
  end
end
